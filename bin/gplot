#!/usr/bin/env python3

# Todo:
#  - check gnuplot is installed
#  - warn if no columns

import argparse
import collections
import fileinput
import os
import re
import shutil
import subprocess
import sys
import tempfile

def main():
    args = parseArgs()
    path, maybe_temp_file = getInputFilePath(args)

    metaData = parseInputMetaData(path)
    if not metaData:
        sys.exit("Couldn't find any data in input file")
    if args.list_metadata:
        listMetaData(metaData)
        sys.exit(0)

    script_file = generateScript(args, path, metaData)
    plot(args, script_file.name)

def parseArgs():
    parser = argparse.ArgumentParser(description = 'Plot graphs with gnuplot')
    parser.add_argument('input', nargs='?',
                        help='Path of data file containing one or more data sets; default is stdin')

    parser.add_argument('-l', '--list-metadata', action='store_true',
                        help='List input metadata such as sets and column names.')

    group = parser.add_argument_group('Plot details')
    group.add_argument('-x', metavar='COLUMN=LABEL', default='1',
                       help='Set X axis data column and/or label')
    group.add_argument('-y', metavar='COLUMN=LABEL',
                       default=[], action='append',
                       help='Add plot giving Y axis data column and/or label')
    group.add_argument('-y2', metavar='COLUMN=LABEL',
                       default=[], action='append',
                       help='Add plot giving second Y axis data column and/or label')
    group.add_argument('-s', '--data-set', metavar='N',
                       type=int, default=[], action='append',
                       help='Add data set to plot; default is all')

    group = parser.add_argument_group('Output')
    group.add_argument('-o', '--output', metavar='PATH',
                       help='Output filename; default is stdout')
    group.add_argument('-f', '--output-format', choices=['txt','svg'],
                       help='Output type; default is text')
    group.add_argument('-ow', '--width',
                       help="Output image width", default="1000")
    group.add_argument('-oh', '--height',
                       help="Output image height", default="500")

    parser.add_argument('-v', '--verbose', action='store_true',
                       help='Print gnuplot script and command line used')
    return parser.parse_args()

def getInputFilePath(args):
    if not args.input:
        return pipeInputToTempFile()

    # Check the input path is readable.
    try:
        with open(args.input, 'r'):
            pass
    except OSError as err:
        sys.exit(f"Can't read input file '{args.input}': {err}")

    return args.input, None

def pipeInputToTempFile():
    file = tempfile.NamedTemporaryFile(mode='w+')
    file.write(sys.stdin.read())
    file.flush()
    file.seek(0)

    # Temp file will be deleted when object is destroyed.
    return file.name, file

def parseInputMetaData(path):
    # Parse set name and column names from first two comment lines at
    # the start of each data set.

    blankLineCount = 0
    commentLineCount = 0
    dataLineCount = 0
    inDataSet = False
    setMetaData = None

    setMetaDataList = []

    with open(path, 'r') as f:
        for line in f:
            line = line.rstrip()

            isBlank = line == ""
            if isBlank:
                blankLineCount += 1
            else:
                blankLineCount = 0

            if not isBlank and not inDataSet:
                inDataSet = True
                commentLineCount = 0
                dataLineCount = 0
                setMetaData = SetMetaData()
            elif blankLineCount == 2:
                inDataSet = False

            isComment = line.startswith('#')
            if isComment:
                assert inDataSet
                commentLineCount += 1
                if commentLineCount == 1:
                    setMetaData.name = line[1:].lstrip().split()[0]
                elif commentLineCount == 2:
                    setMetaData.columnNames = line[1:].split()
                    setMetaData.columns = len(setMetaData.columnNames)

            if not isBlank and not isComment:
                dataLineCount += 1
                if dataLineCount == 1:
                    if setMetaData.columns is None:
                        setMetaData.columns = len(line.split())
                    setMetaDataList.append(setMetaData)

    return setMetaDataList

class SetMetaData:
    def __init__(self):
        self.name = None
        self.columns = None
        self.columnNames = []

def listMetaData(metaDataList):
    print(f"Number of data sets: {len(metaDataList)}")
    for i in range(len(metaDataList)):
        md = metaDataList[i]
        print(f"  Set {i + 1}:")
        name = md.name or "(none)"
        columnNames = md.columnNames or ["(none)"]
        print(f"    Name: {name}")
        print(f"    Columns: {md.columns}")
        print(f"    Column names: {' '.join(columnNames)}")


def generateScript(args, path, metaData):
    dataSets =  dataSetsToPlot(args, metaData)
    xColumn = parseColumnSpec(args.x)
    yColumns = yColumnsToPlot(args, metaData)
    y2Columns = y2ColumnsToPlot(args, metaData)

    # todo: look up column names in names

    script = Script(getTerminalArgs(args))
    script.output = args.output
    for dataSet in dataSets:
        for yColumn in yColumns:
            plot = PlotElement(path)
            plot.index = dataSet
            plot.using = f"{xColumn[0]}:{yColumn[0]}"
            plot.title = getPlotTitle(args, metaData, dataSet, yColumn)
            plot.axes = 'x1y1'
            script.plotElements.append(plot)
        for yColumn in y2Columns:
            plot = PlotElement(path)
            plot.index = dataSet
            plot.using = f"{xColumn[0]}:{yColumn[0]}"
            plot.title = getPlotTitle(args, metaData, dataSet, yColumn)
            plot.axes = 'x1y2'
            script.plotElements.append(plot)

    file = tempfile.NamedTemporaryFile(mode='w+')
    file.write(str(script))
    file.flush()

    if args.verbose:
        file.seek(0)
        print(file.read().rstrip())

    return file

def dataSetsToPlot(args, metaData):
    if args.data_set:
        return args.data_set

    return list(range(len(metaData)))

def yColumnsToPlot(args, metaData):
    if args.y:
        return list([parseColumnSpec(spec) for spec in args.y])

    # Use columns from first data set for all sets.
    columnNames = metaData[0].columnNames

    return [(i, columnNames[i]) for i in range(2, len(columnNames))]

def y2ColumnsToPlot(args, metaData):
    if args.y2:
        return list([parseColumnSpec(spec) for spec in args.y2])

    return []

def parseColumnSpec(spec):
    column = None
    label = None

    if '=' in spec:
        column, _, label = spec.partition('=')
        if not re.match(r"^\d+$", column):
            sys.exit("Bad column number '%s' in spec '%s'" % (column, spec))
        column = int(column)
    elif re.match(r"\d+$", spec):
        column = int(spec)
    else:
        label = spec

    return column, label

def getTerminalArgs(args):
    format = getOutputFormat(args);

    if format == 'txt':
        columns = shutil.get_terminal_size().columns
        rows = int(columns / 4)
        return(f"dumb nofeed {columns} {rows}")
    elif format == 'svg':
        return(f"svg size {args.width}, {args.height}")
    elif format == 'png':
        return (f"png size {args.width}, {args.height}")

    sys.exit(f"Unsupported output format: {format}")

def getOutputFormat(args):
    format = args.output_format
    if format is not None:
        return format

    if not args.output:
        return 'txt'

    outputPath = os.path.normpath(args.output)
    _, ext = os.path.splitext(outputPath)
    if ext == '.svg':
        return 'svg'
    elif ext == '.png':
        return 'png'

    sys.exit(f"Can't guess output format from file extension {ext}")

def getPlotTitle(args, metaData, dataSet, yColumn):
    setMetaData = metaData[dataSet]

    setTitle = None
    if setMetaData.name:
        setTitle = setMetaData.name
    elif args.input:
        setTitle = os.path.basename(args.input)

    columnTitle = None
    if yColumn[1]:
        columnTitle = yColumn[1]
    elif len(setMetaData.columnNames) >= yColumn[0]:
        columnTitle = setMetaData.columnNames[yColumn[0] - 1]
    else:
        columnTitle = f"Column {yColumn[0]}"

    parts = []
    if setTitle:
        parts.append(setTitle)
    if columnTitle:
        parts.append(columnTitle)
    return ' '.join(parts)

class Script:
    setFields = ['output', 'title', 'xlabel', 'ylabel']

    def __init__(self, terminal):
        self.terminal = terminal
        for name in self.setFields:
            setattr(self, name, None)
        self.plotElements = []

    def __str__(self):
        return ''.join(
            [self.setCommand(name) for name in self.setFields] +
            [self.setCommand("terminal", False),
             self.plotCommand()])

    def setCommand(self, name, quote=True):
        value = getattr(self, name)
        if value is None:
            return ''
        if quote:
            value = f"'{value}'"
        return f"set {name} {value}\n"

    def plotCommand(self):
        if not self.plotElements:
            return ''
        elements = [str(element) for element in self.plotElements]
        return f"plot {', '.join(elements)}\n"

class PlotElement:
    propertyNames = ['index', 'using', 'axes']

    def __init__(self, dataSource):
        self.dataSource = dataSource
        self.title = None
        for name in self.propertyNames:
            setattr(self, name, None)
        # todo: linecolor

    def __str__(self):
        propValues = [self.property(name) for name in self.propertyNames] + \
            [self.property('title', True)]
        return f"'{self.dataSource}'{''.join(propValues)} with lines"

    def property(self, name, quote=False):
        value = getattr(self, name)
        if value is None:
            return ''
        if quote:
            value = f"'{value}'"
        return f" {name} {value}"

def plot(args, script):
    cmd = ['gnuplot', script]
    if args.verbose:
        print(' '.join(cmd))

    proc = subprocess.run(cmd, capture_output=True)
    if proc.returncode != 0:
        print("Error running gnuplot:")
        print(proc.stderr.decode('ascii'))
        sys.exit(proc.returncode)

    output = proc.stdout.decode('ascii').strip()
    if output:
        print(output)

main()
